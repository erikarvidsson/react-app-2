{"version":3,"sources":["components/Cards/index.js","components/Button/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["CardsStyled","styled","div","_templateObject","Cards","props","react_default","a","createElement","name","className","src","image","description","ButtonStyle","Button_templateObject","Button","_ref","handleButton","onClick","App","state","beer","panda_img","paly","fetchApi","fetch","then","res","json","data","_this","setState","this","console","log","food_pairing","components_Cards","image_url","foodPairing","components_Button","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0hBAKA,IAAMA,EAAcC,IAAOC,IAAVC,KAoCFC,EAjBD,SAACC,GACb,OACEC,EAAAC,EAAAC,cAACR,EAAD,KACIM,EAAAC,EAAAC,cAAA,cAAMH,EAAMI,KAAZ,KACAH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OAAMJ,EAAAC,EAAAC,cAAA,OAAKG,IAAKN,EAAMO,SACrCN,EAAAC,EAAAC,cAAA,cAAMH,EAAMQ,sYCxBpB,IAAMC,EAAcb,IAAOC,IAAVa,KA6BFC,EAXA,SAAAC,GAAoB,IAAlBC,EAAkBD,EAAlBC,aACf,OACEZ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACM,EAAD,CAAaK,QAASD,MC0BbE,6MA1CbC,MAAQ,CACJC,KAAM,GACNC,UAAW,GACXC,MAAM,KAORC,SAAW,WAGTC,MAFY,2CAGXC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GACJC,EAAKC,SAAS,CACZV,KAAMQ,EAAK,2FAVfG,KAAKR,4CAoBP,OAHAS,QAAQC,IAAIF,KAAKZ,MAAMC,KAAKc,cAI1B9B,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAC6B,EAAD,CACE5B,KAAOwB,KAAKZ,MAAMC,KAAKb,KACvBG,MAAQqB,KAAKZ,MAAMC,KAAKgB,UACxBzB,YAAcoB,KAAKZ,MAAMC,KAAKT,YAC9B0B,YAAcN,KAAKZ,MAAMC,KAAKc,eAGhC9B,EAAAC,EAAAC,cAACgC,EAAD,CAAQtB,aAAce,KAAKR,mBArCjBgB,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,KAAK,SAAA4B,GACjCA,EAAaC","file":"static/js/main.88f230a5.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\n\nconst CardsStyled = styled.div `\n    border-radius: 20px;\n    width: 650px;\n    height: 700px;\n\n    h1{\n      margin-top: 90px;\n    }\n    img{\n      height: 45vh;\n    }\n\n    .box{\n      height: 45vh;\n    }\n\n`\n\n\nconst Cards = (props) => {\n  return(\n    <CardsStyled>\n        <h1> {props.name} </h1>\n        <div className=\"box\"><img src={props.image} /></div>\n        <h3> {props.description}</h3>\n\n    </CardsStyled>\n  )\n}\n\nCards.propTypes = {\n  name: PropTypes.string,\n  image: PropTypes.string,\n  description: PropTypes.string,\n  food_pairing: PropTypes.array\n}\nexport default Cards;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\n\nconst ButtonStyle = styled.div `\n    height: 150px;\n    width: 150px;\n    background-image:url('./img/cap_button.png');\n    background-size: cover;\n    cover: no-repeat;\n    margin-left 38%;\n    margin-top: 60px;\n\n    &:active{\n      height: 140px;\n      width: 140px;\n      margin-left: 39%;\n      margin-top: 64px;\n    }\n`\n\n\nconst Button = ({handleButton}) => {\n  return(\n    <div>\n      <ButtonStyle onClick={handleButton}></ButtonStyle>\n    </div>\n  )\n}\n\nButton.propTypes = {\n  inverted: PropTypes.bool\n}\nexport default Button;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Cards from '../Cards';\nimport Button from '../Button';\n// import Test from '../Test';\n//\n// var cors = require('cors');\n// app.use(cors());\n\nclass App extends Component {\n  state = {\n      beer: [],\n      panda_img: [],\n      paly: false\n    }\n\n    componentDidMount() {\n      this.fetchApi();\n    }\n\n    fetchApi = () => {\n      const api = 'https://api.punkapi.com/v2/beers/random';\n\n      fetch(api)\n      .then(res => res.json())\n      .then(data =>{\n        this.setState({\n          beer: data[0]\n      })\n      })\n    }\n\n\n  render() {\n    console.log(this.state.beer.food_pairing);\n    // console.log(this.state.panda_img);\n    // console.log(this.state.beer.name);\n    return (\n      <div className=\"App\">\n        <Cards\n          name={ this.state.beer.name }\n          image={ this.state.beer.image_url }\n          description={ this.state.beer.description }\n          foodPairing={ this.state.beer.food_pairing }\n        />\n\n        <Button handleButton={this.fetchApi}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}